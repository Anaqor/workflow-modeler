@import "colors";

/* use list function to iterate over the button types with specific class and the used colors */
/*
 1) name of the button class (after btn-outline-)
 2) normal text color
 3) darken text color
*/
$buttonTypes:
        'planqk' $planqk-button-blue $planqk-button-blue-darken,
        'save' $planqk-button-blue $planqk-button-blue-darken,
        'cancel' $planqk-cancel $planqk-cancel-darken,
        'danger' $planqk-red $planqk-red-darken;

@each $button in $buttonTypes {
    .btn.btn-#{nth($button, 1)} {
        color: #ffffff;
        background-color: #{nth($button, 2)};
        border-color: #{nth($button, 2)};

        &:hover,
        &:active {
            color: #ffffff;
            background-color: #{nth($button, 3)};
            border-color: #{nth($button, 3)};
        }
    }
    .btn.btn-outline-#{nth($button, 1)} {
        border: none;
        border-left: 2px solid nth($button, 2);
        border-right: 2px solid nth($button, 3);
        background-image: -webkit-linear-gradient(left, nth($button, 2), nth($button, 3)), -webkit-linear-gradient(left, nth($button, 2), nth($button, 3));
        background-size: 100% 2px;
        background-position: 0 100%, 0 0;
        background-repeat: no-repeat;
        background-clip: border-box;

        & > span {
            background: linear-gradient(to right, nth($button, 3), nth($button, 3) 50%, nth($button, 2) 50%) 100%;
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-size: 200% 100%;

            transition: background-position 600ms ease;
        }
        &:hover {
            color: nth($button, 3);
            border-left-color: nth($button, 2);
            border-right-color: nth($button, 3);
            background-color: $planqk-white;

            & > span {
               background-position: 0 100%;
            }
        }

        &:hover:disabled > span {
            background-position: right;
        }
    }
}

.btn {
    font-weight: normal !important;
}
.btn.btn-save,
.btn.btn-success,
.btn.btn-add {
    color: $planqk-white;
}

.dropdown.planqk-button-dropdown {
    border: 2px $planqk-button-blue solid;
    background-color: $planqk-button-blue;
    border-radius: .2em;

    .dropdown-toggle,
    .dropdown-toggle:hover,
    .dropdown-toggle:focus{
        opacity: 1 !important;
    }
    &:hover,
    &:active,
    &:focus {
        border: 2px $planqk-button-blue-darken solid;
        background-color: $planqk-button-blue-darken;
    }
}

/* buttons to filter in lists */

::v-deep .btn.filter,
::v-deep .btn.filter:active {
    color: $planqk-placeholder;
    border-radius: 0;
    border: none;
    border-bottom: 2px solid $planqk-white;
    background-color: $planqk-white;
}

::v-deep .btn.filter.active {
    color: $planqk-grey !important;
    background-color: $planqk-white;
}

/* Browse button for file import */
::v-deep .custom-file-label:after {
    background-color: $planqk-blue;
    color: $planqk-white;
}

/* define icons which are displayed in buttons */
.icon-add_button:before {
    content: "\e994";
}
.icon-delete_button:before {
    content: "\ebe1";
}
.icon-save_button:before {
    content: "\ebe4";
}
.icon-cancel_button:before {
    content: "\eb52";
}
.icon-upload_button:before {
    content: "\ea47";
}
.icon-lock {
    content: "\1F510";
}